/*
	File: PTrackConfig.cpp
	Author: Henri Keeble
	Desc: Defines a class designed to represent a track configuration internally.
*/

#include "PTrackConfig.h"

namespace procedural
{
	// Header constants
	static const std::string CATEGORY = "procedural";
	static const std::string AUTHOR = "TORCS Adaptive";
	static const std::string DESCRIPTION = "A track generated by the procedural library in TORCS Adaptive.";

	PTrackConfig::PTrackConfig(void* fileHandle, std::string trkName)
	{
		if (fileHandle)
		{
			// Initialize Configuration sections
			header = CfgHeader(trkName);
			graphic = CfgGraphic(trkName);
			mainTrack = CfgMainTrack();

			// Read specific sections of the configuration
			graphic.Read(fileHandle);
			mainTrack.Read(fileHandle);
		}
		else
			pOut("Error, unable to read track configuration, null handle passed.\n");
	}

	// --- Configuration Constructors ---
	CfgHeader::CfgHeader()
	{
		category = CATEGORY;
		version = 1;
		author = AUTHOR;
		description = DESCRIPTION;
	}

	CfgHeader::CfgHeader(std::string trkName)
	{
		category = CATEGORY;
		version = 1;
		author = AUTHOR;
		description = DESCRIPTION;
		name = trkName;
	}

	CfgGraphic::CfgGraphic()
	{
		descFile = "noTrkNameSet.ac";
	}

	CfgGraphic::CfgGraphic(std::string trkName)
	{
		descFile = trkName + ".ac";
	}

	// --- Configuration read functions ---
	void CfgGraphic::Read(void* handle)
	{
		bgImage = "../" + std::string(GfParmGetStr(handle, TRK_SECT_GRAPH, TRK_ATT_BKGRND, DFLT_BG_IMG));

		BGColorR = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_BGCLR_R, (char*)nullptr, 0);
		BGColorG = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_BGCLR_G, (char*)nullptr, 0);
		BGColorB = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_BGCLR_B, (char*)nullptr, 0);

		ambBGColorR = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_AMBIENT_R, (char*)nullptr, 0);
		ambBGColorG = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_AMBIENT_G, (char*)nullptr, 0);
		ambBGColorB = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_AMBIENT_B, (char*)nullptr, 0);

		diffBGColorR = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_DIFFUSE_R, (char*)nullptr, 0);
		diffBGColorG = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_DIFFUSE_G, (char*)nullptr, 0);
		diffBGColorB = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_DIFFUSE_B, (char*)nullptr, 0);

		specBGColorR = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_SPEC_R, (char*)nullptr, 0);
		specBGColorG = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_SPEC_G, (char*)nullptr, 0);
		specBGColorB = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_SPEC_B, (char*)nullptr, 0);

		lPosX = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_LIPOS_X, (char*)nullptr, 0);
		lPosY = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_LIPOS_Y, (char*)nullptr, 0);
		lPosZ = GfParmGetNum(handle, TRK_SECT_GRAPH, TRK_ATT_LIPOS_Z, (char*)nullptr, 0);

		// Read terrain generation configuration
		terrainGeneration.Read(handle);
	}

	void CfgTerrainGeneration::Read(void* handle)
	{
		trkStep = GfParmGetNum(handle, TRK_SECT_TERRAIN, TRK_ATT_TSTEP, (const char*)nullptr, 0);

		brdrMargin = GfParmGetNum(handle, TRK_SECT_TERRAIN, TRK_ATT_BMARGIN, (const char*)nullptr, 0);
		brdrStep = GfParmGetNum(handle, TRK_SECT_TERRAIN, TRK_ATT_BSTEP, (const char*)nullptr, 0);
		brdrHeight = GfParmGetNum(handle, TRK_SECT_TERRAIN, TRK_ATT_BHEIGHT, (const char*)nullptr, 0);;

		surface = GfParmGetStr(handle, TRK_SECT_TERRAIN, TRK_ATT_SURF, DFLT_TR_SURF);

		orientation = GfParmGetStr(handle, TRK_SECT_TERRAIN, TRK_ATT_ORIENTATION, DFLT_ORIENTATION);;
	}

	void CfgMainTrack::Read(void* handle)
	{
		surfaceName = GfParmGetStr(handle, TRK_SECT_MAIN, TRK_ATT_SURF, DFLT_TRK_SURF);
		width = GfParmGetNum(handle, TRK_SECT_MAIN, TRK_ATT_WIDTH, (char*)nullptr, DFLT_TRK_WIDTH);
		stepsLength = GfParmGetNum(handle, TRK_SECT_MAIN, TRK_ATT_STEPLEN, (char*)nullptr, DFLT_TRK_WIDTH);

		rSideSurface = GfParmGetStr(handle, TRK_SECT_MAIN, TRK_ATT_RSSURF, DFLT_SIDE_SURF);
		lSideSurface = GfParmGetStr(handle, TRK_SECT_MAIN, TRK_ATT_LSSURF, DFLT_SIDE_SURF);

		rSideWidth = GfParmGetNum(handle, TRK_SECT_MAIN, TRK_ATT_RSW, (char*)nullptr, DFLT_SIDE_WIDTH);
		lSideWidth = GfParmGetNum(handle, TRK_SECT_MAIN, TRK_ATT_LSW, (char*)nullptr, DFLT_SIDE_WIDTH);

		profilStepsLength = GfParmGetNum(handle, TRK_SECT_MAIN, TRK_ATT_PROFSTEPSLEN, (char*)nullptr, DFLT_PROF_STEPSLEN);

		lSideType = GfParmGetStr(handle, TRK_SECT_MAIN, TRK_ATT_LST, DFLT_SIDE_TYPE);
		rSideType = GfParmGetStr(handle, TRK_SECT_MAIN, TRK_ATT_RST, DFLT_SIDE_TYPE);
	}
}